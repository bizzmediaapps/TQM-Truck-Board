<!DOCTYPE html>
<html>
<head>
  <title>Live Soccer Scoreboard - LED Display</title>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    html, body {
      height: 100vh;
      width: 100vw;
      overflow: hidden;
      font-family: 'Arial Black', Arial, sans-serif;
      background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0a0a0a 100%);
      color: #ffffff;
      text-align: center;
      cursor: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }
    
    .led-container {
      height: 100vh;
      width: 100vw;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      position: relative;
      background: radial-gradient(ellipse at center, #1a1a1a 0%, #000000 100%);
    }
    
    .led-title {
      font-size: clamp(2rem, 5vw, 4rem);
      font-weight: 900;
      color: #00ff41;
      text-shadow: 0 0 20px #00ff41, 0 0 40px #00ff41;
      margin-bottom: 2vh;
      letter-spacing: 3px;
      text-transform: uppercase;
    }
    
    #scoreboard {
      background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
      padding: 4vh 6vw;
      border-radius: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      box-shadow: 
        0 0 50px rgba(0, 255, 65, 0.3),
        inset 0 0 50px rgba(255, 255, 255, 0.05);
      border: 3px solid #00ff41;
      min-width: 80vw;
      max-width: 90vw;
    }
    
    .teams-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      margin-bottom: 3vh;
    }
    
    .team {
      display: flex;
      flex-direction: column;
      align-items: center;
      flex: 1;
      padding: 0 2vw;
    }
    
    .team img {
      height: clamp(60px, 8vw, 120px);
      width: clamp(60px, 8vw, 120px);
      margin-bottom: 1vh;
      border-radius: 50%;
      border: 2px solid #00ff41;
      object-fit: cover;
    }
    
    .team-name {
      font-size: clamp(1.5rem, 4vw, 3rem);
      font-weight: 900;
      color: #ffffff;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
      margin-bottom: 1vh;
      letter-spacing: 2px;
    }
    
    .score-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin: 2vh 0;
      flex: 0 0 auto;
    }
    
    .score {
      font-size: clamp(4rem, 12vw, 8rem);
      font-weight: 900;
      color: #00ff41;
      text-shadow: 
        0 0 20px #00ff41,
        0 0 40px #00ff41,
        2px 2px 8px rgba(0,0,0,0.8);
      display: flex;
      align-items: center;
      gap: 2vw;
    }
    
    .score-separator {
      color: #ffffff;
      font-size: clamp(3rem, 10vw, 6rem);
      margin: 0 1vw;
    }
    
    .match-info {
      display: flex;
      justify-content: space-between;
      width: 100%;
      margin-top: 3vh;
      gap: 4vw;
    }
    
    #timer {
      font-size: clamp(1.8rem, 4.5vw, 3.5rem);
      font-weight: 900;
      color: #ffff00;
      text-shadow: 0 0 15px #ffff00, 2px 2px 4px rgba(0,0,0,0.8);
      background: rgba(255, 255, 0, 0.1);
      padding: 1vh 2vw;
      border-radius: 10px;
      border: 2px solid #ffff00;
      flex: 1;
    }
    
    #status {
      font-size: clamp(1.8rem, 4.5vw, 3.5rem);
      font-weight: 900;
      color: #ff6600;
      text-shadow: 0 0 15px #ff6600, 2px 2px 4px rgba(0,0,0,0.8);
      background: rgba(255, 102, 0, 0.1);
      padding: 1vh 2vw;
      border-radius: 10px;
      border: 2px solid #ff6600;
      flex: 1;
    }
    
    #mediaContainer {
      position: absolute;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      z-index: 1000;
      background: rgba(0, 0, 0, 0.95);
      display: none;
      justify-content: center;
      align-items: center;
    }
    
    #mediaContainer.active {
      display: flex;
    }
    
    #mediaContainer video,
    #mediaContainer img {
      max-width: 90vw;
      max-height: 90vh;
      object-fit: contain;
      border-radius: 10px;
      box-shadow: 0 0 50px rgba(0, 255, 65, 0.5);
    }
    
    .led-border {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      border: 5px solid #00ff41;
      pointer-events: none;
      box-shadow: 
        inset 0 0 50px rgba(0, 255, 65, 0.2),
        0 0 50px rgba(0, 255, 65, 0.3);
    }
    
    /* Animation for LED effect */
    @keyframes ledGlow {
      0%, 100% { box-shadow: 0 0 20px #00ff41, 0 0 40px #00ff41; }
      50% { box-shadow: 0 0 30px #00ff41, 0 0 60px #00ff41; }
    }
    
    .led-title {
      animation: ledGlow 3s ease-in-out infinite;
    }
    
    /* Responsive breakpoints for different LED screen resolutions */
    @media (min-width: 1920px) {
      .led-title { font-size: 5rem; }
      .team-name { font-size: 3.5rem; }
      .score { font-size: 10rem; }
      #timer, #status { font-size: 4rem; }
    }
    
    @media (min-width: 3840px) {
      .led-title { font-size: 8rem; }
      .team-name { font-size: 6rem; }
      .score { font-size: 16rem; }
      #timer, #status { font-size: 6rem; }
    }
    
    /* Hide elements when media is playing */
    .media-playing .led-container > *:not(#mediaContainer) {
      opacity: 0.1;
    }
  </style>
</head>
<body>
  <div class="led-border"></div>
  <div class="led-container">
    <h1 class="led-title">Live Soccer Scoreboard</h1>
    
    <div id="scoreboard">
      <div class="teams-container">
        <div class="team">
          <img id="logoA" alt="" src="" style="display: none;">
          <div id="teamA" class="team-name">Team A</div>
        </div>
        
        <div class="score-container">
          <div class="score">
            <span id="scoreA">0</span>
            <span class="score-separator">-</span>
            <span id="scoreB">0</span>
          </div>
        </div>
        
        <div class="team">
          <img id="logoB" alt="" src="" style="display: none;">
          <div id="teamB" class="team-name">Team B</div>
        </div>
      </div>
      
      <div class="match-info">
        <div id="timer">00:00</div>
        <div id="status">Not Started</div>
      </div>
    </div>
  </div>

  <div id="mediaContainer"></div>

  <script>
    let triggers = {};
    let mediaTimeout;

    // Optimize for LED display performance
    document.addEventListener('DOMContentLoaded', function() {
      // Disable text selection and context menu for LED display
      document.addEventListener('selectstart', e => e.preventDefault());
      document.addEventListener('contextmenu', e => e.preventDefault());
      
      // Force hardware acceleration
      document.body.style.transform = 'translateZ(0)';
      
      // Set initial fetch
      fetchData();
      
      // Set interval for updates (optimized for LED displays)
      setInterval(fetchData, 2000); // Reduced frequency for LED stability
    });

    async function fetchData() {
      try {
        const res = await fetch('/api/scores');
        const data = await res.json();

        // Update team information
        updateElement('teamA', data.teamA);
        updateElement('teamB', data.teamB);
        updateElement('scoreA', data.scoreA);
        updateElement('scoreB', data.scoreB);
        updateElement('status', data.status);
        updateElement('timer', data.time);

        // Update logos with error handling
        updateLogo('logoA', data.logoA);
        updateLogo('logoB', data.logoB);

        // Update triggers
        if (data.triggers) {
          triggers = data.triggers;
        }
      } catch (error) {
        console.warn('Failed to fetch data:', error);
      }
    }

    function updateElement(id, value) {
      const element = document.getElementById(id);
      if (element && value !== undefined && value !== null) {
        element.textContent = value;
      }
    }

    function updateLogo(id, src) {
      const img = document.getElementById(id);
      if (img && src) {
        img.onload = () => img.style.display = 'block';
        img.onerror = () => img.style.display = 'none';
        img.src = src;
      } else if (img) {
        img.style.display = 'none';
      }
    }

    function showMedia(src) {
      if (!src) return;
      
      const container = document.getElementById('mediaContainer');
      container.innerHTML = "";
      
      // Clear any existing timeout
      if (mediaTimeout) {
        clearTimeout(mediaTimeout);
      }

      // Add media playing class
      document.body.classList.add('media-playing');

      if (src.toLowerCase().match(/\.(mp4|webm|ogg|mov|avi)$/)) {
        const video = document.createElement("video");
        video.src = src;
        video.autoplay = true;
        video.muted = true; // LED displays often require muted autoplay
        video.loop = false;
        video.style.maxWidth = "90vw";
        video.style.maxHeight = "90vh";
        video.style.objectFit = "contain";
        
        video.addEventListener('ended', hideMedia);
        video.addEventListener('error', hideMedia);
        
        container.appendChild(video);
      } else {
        const img = document.createElement("img");
        img.src = src;
        img.style.maxWidth = "90vw";
        img.style.maxHeight = "90vh";
        img.style.objectFit = "contain";
        
        img.addEventListener('error', hideMedia);
        
        container.appendChild(img);
        
        // Auto-hide images after 10 seconds
        mediaTimeout = setTimeout(hideMedia, 10000);
      }

      container.classList.add('active');
    }

    function hideMedia() {
      const container = document.getElementById('mediaContainer');
      container.classList.remove('active');
      container.innerHTML = "";
      document.body.classList.remove('media-playing');
      
      if (mediaTimeout) {
        clearTimeout(mediaTimeout);
        mediaTimeout = null;
      }
    }

    // Keyboard triggers for media (optimized for LED display controllers)
    document.addEventListener("keydown", (e) => {
      // Hide media on ESC
      if (e.key === 'Escape') {
        hideMedia();
        return;
      }
      
      const trigger = triggers[e.key.toLowerCase()];
      if (trigger) {
        showMedia(trigger);
      }
    });

    // Touch/click to hide media (for touch-enabled LED displays)
    document.addEventListener('click', (e) => {
      if (e.target.closest('#mediaContainer')) {
        hideMedia();
      }
    });

    // Prevent page zoom and other unwanted behaviors
    document.addEventListener('wheel', e => e.preventDefault(), { passive: false });
    document.addEventListener('touchmove', e => e.preventDefault(), { passive: false });
    
    // Handle visibility changes (LED display power management)
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        hideMedia();
      } else {
        fetchData(); // Refresh data when display becomes visible
      }
    });
  </script>
</body>
</html>
